import java.util.EmptyStackException;public final class LinkedStack<T> implements StackInterface<T> {	private Node topNode;	public LinkedStack() {		topNode = null;	}	public void push(T element) {		Node newNode = new Node(element, topNode);		topNode = newNode;		// topNode = new Node(element, topNode); // Alternate code	}	public T peek() {		if (isEmpty()) {			throw new EmptyStackException();		} else {			return topNode.data;		}	}	public T pop() {		T top = peek(); // Might throw EmptyStackException		// Assertion: topNode != null		topNode = topNode.next;		return top;	}	public boolean isEmpty() {		return topNode == null;	}	public void clear() {		while (topNode != null) {			topNode.data = null;			topNode = topNode.next;		}	}	public boolean priorityPush(T element) {		if (isEmpty() || topNode.data.equals(element)) {			if (topNode != null && topNode.data.equals(element)) {				return true;			}			push(element);			return false;		}		Node previous = topNode;		Node current = topNode.next;		while (current != null) {			if (current.data.equals(element)) {				previous.next = current.next;				push(element);				return true;			}			previous = current;			current = current.next;		}		push(element);		return false;	}	public T peekNext() {	    if (topNode == null || topNode.next == null) {	        return null;  	    }	    return topNode.next.data;	}	private class Node {		private T data;		private Node next;		private Node(T data) {			this(data, null);		}		private Node(T data, Node next) {			this.data = data;			this.next = next;		}		private T getData() {			return data;		}		private void setData(T data) {			this.data = data;		}		private Node getNextNode() {			return next;		}		private void setNextNode(Node next) {			this.next = next;		}	}}